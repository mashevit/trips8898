package com.my.travel.controller;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.my.travel.components.IsPresentState;
import com.my.travel.components.Stateful;
import com.my.travel.components.Stateful2;
import com.my.travel.components.ToAndApp;
import com.my.travel.components.Tosave;
import com.my.travel.dao.CityRepository;
import com.my.travel.dao.PicRepository;
import com.my.travel.dao.SightseeingRepository;
import com.my.travel.dao.TripRepository;
import com.my.travel.dao.TripSightseeingRepository;
import com.my.travel.model2.City;
import com.my.travel.model2.Pic;
import com.my.travel.model2.Sightseeing;
import com.my.travel.model2.Trip;
import com.my.travel.model2.TripSightseeing;





@CrossOrigin
@Controller
@SessionAttributes({ "requestedTrip", "sights", "sights2", "fooOption", "requestedSight", "stateful",
		"requestedtrSight" })
@RequestMapping(value = "/web")
public class tripeditorcontroller {
	
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private TripRepository tripRepository;
	
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private SightseeingRepository sightseeingRepository;

	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private CityRepository cityRepository;

	@Autowired 
	private TripSightseeingRepository tripSightseeingRepository;

	@Autowired 
	private IsPresentState isPresentState;
	
	
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private PicRepository picRepository;
	/*
	 * @RequestMapping("/edittrip/{id}") public String developer(@PathVariable int
	 * id, Model model) { model.addAttribute("developer",
	 * tripRepository.findById(id).get()); model.addAttribute("skills",
	 * tripRepository.findAll()); return "tripeditor"; }
	 */

	@RequestMapping(value = "/edittrip")
	public String notesList(Model model) {
		if (!model.containsAttribute("requestedTrip")||!model.containsAttribute("requestedSight")) {
			Trip tr;
			if(getusers().size()==0) {tr= new Trip(); tr.setIdtrip(-1);tr.setCity(nullcity());}
			else {
			/*Trip*/ tr = getusers().get(0);}
			model.addAttribute("requestedTrip", tr);
			sightlistinit(model, tr);

		}
		if (!model.containsAttribute("stateful"))
			model.addAttribute("stateful", new Stateful());

		if (!model.containsAttribute("selectedTrOption")) {

			model.addAttribute("selectedTrOption", new Trip());
			model.addAttribute("fooOption", new Sightseeing());
		}
		return "redirect:/web/init-sights";
	}

		public City nullcity() {
			
			City c=new City(); c.setCityName("null city");c.setIdcities(-1);
			return c;
		}
	private void sightlistinit(Model model, Trip tr) {
		if(tr.getIdtrip()==-1) {

			initnullsight(model); return;
		}else {
		List<Sightseeing> l1 = getsights(tr.getIdtrip());
		if(l1.size()==0) 	{initnullsight(model); return;}
		model.addAttribute("sights", l1);
		List<Sightseeing> l2 = getsights2(tr);
		model.addAttribute("sights2", getsightsdiff(getsights2(tr), l1));
		if(l2.size()==0) {			Sightseeing s=new Sightseeing();	s.setCity(nullcity());s.setIdsightseeings(-1);s.setSightseeingsname("null sight");
		model.addAttribute("requestedSight", s);}else
		model.addAttribute("requestedSight", l2.get(0));
	}}
	
	@RequestMapping("/init-sights")
	private String sightlistinit2(Model model, @ModelAttribute("requestedTrip") Trip tr) {
		if(tr.getIdtrip()==-1) {

			initnullsight(model);return "tripeditor";
		}else {
		List<Sightseeing> l1 = getsights(tr.getIdtrip());
		if(l1.size()==0) 	{initnullsight(model); return "tripeditor";}
		model.addAttribute("sights", l1);
		List<Sightseeing> l2 = getsights2(tr);
		model.addAttribute("sights2", getsightsdiff(getsights2(tr), l1));
		if(l2.size()==0) {			Sightseeing s=new Sightseeing();	s.setCity(nullcity());s.setIdsightseeings(-1);s.setSightseeingsname("null sight");
		model.addAttribute("requestedSight", s);}else
		model.addAttribute("requestedSight", l2.get(0));
	}
		return "tripeditor";
	}
//	
//	@ModelAttribute("requestedTrip") Trip requestedTrip

	private void initnullsight(Model model) {
		
		model.addAttribute("sights", nulllistsights());
		
		model.addAttribute("sights2", nulllistsights());

		model.addAttribute("requestedSight",nullSightseeing());
		
		
	}	
	
	
	private Sightseeing nullSightseeing() {
		Sightseeing s=new Sightseeing();	s.setCity(nullcity());
		s.setIdsightseeings(-1);s.setSightseeingsname("null sight");
		return s;
		
		
	}
	
	private List<Sightseeing> nulllistsights(){
		List<Sightseeing> aa=new ArrayList<Sightseeing>();
		aa.add(nullSightseeing());
		return aa;
		
	}
	
/*	@RequestMapping(value = "/addcityto")
	public String notesList1() {
		City a = new City();
		a.setCityName("qwqwq");
		cityRepository.save(a);
		Sightseeing sightseeing = new Sightseeing();
		sightseeing.setCity(a);
		sightseeing.setSightseeingsname("dsadsadsdsa");
		sightseeingRepository.save(sightseeing);
		
		//System.out.println("sds".substring(beginIndex, endIndex));
		System.out.println(picRepository.findAllBytripSightseeingIdtripSightseeingIn(10));
		
		System.out.println(picRepository.findAllBytripSightseeingIdtripSightseeingIn(10));

		return "tripeditor";

	}*/
	
	
	@PostMapping("/updatetrip")
	public String updatetrip(@ModelAttribute("requestedTrip") Trip requestedTrip, Model model) {

/*		Optional<Dish> studentOptional = dishRepository.findById(id);

		if (!studentOptional.isPresent())
			return ResponseEntity.notFound().build();

		student.setIddish(id);*/
		
		tripRepository.save(requestedTrip);

		return "tripeditor";
	}
	
	
	
	
	
	@PostMapping("/selecttrip")
	public String select(@RequestParam Trip nameoftrip, Model model) {

		model.addAttribute("requestedTrip", nameoftrip);

		List<Sightseeing> l1 = getsights(nameoftrip.getIdtrip());
		model.addAttribute("sights", l1);
		model.addAttribute("sights2", getsightsdiff(getsights2(nameoftrip), l1));
		return "tripeditor";
	}

	@PostMapping("/selectsight")
	public String selectsight(@RequestParam Sightseeing nameofsight, @RequestParam String action, Model model,
			@ModelAttribute("requestedTrip") Trip requestedTrip,
			@ModelAttribute("sights") List<Sightseeing> sightslist) {

		int ind = nameofsight.getIdsightseeings();
		boolean ans = sightslist.stream().filter(o -> o.getIdsightseeings() == ind).findFirst().isPresent();
		
		// model.addAttribute("requestedSight", nameofsight);
		if(action.equalsIgnoreCase("slct")){if (!ans) {
			TripSightseeing tripSightseeing = new TripSightseeing();
			tripSightseeing.setSightseeing(nameofsight);
			tripSightseeing.setTrip(requestedTrip);
			tripSightseeingRepository.save(tripSightseeing);
			/*
			 * Hibernate.initialize(requestedTrip.getTripSightseeings());
			 * requestedTrip.addTripSightseeing(tripSightseeing);
			 */
		}
		initSights(model, requestedTrip);

		// model.addAttribute("requestedSightgs", gson.toJson(nameofsight));

		model.addAttribute("requestedSight", nameofsight);
		model.addAttribute("requestedtrSight", tripSightseeingRepository
				.findOneByTripAndSightseeing(requestedTrip, nameofsight).getIdtripSightseeing());
		}else if(action.equalsIgnoreCase("dltsight")) {
			TripSightseeing todel=tripSightseeingRepository
					.findOneByTripAndSightseeing(requestedTrip, nameofsight);
			tripSightseeingRepository.delete(todel);
			sightlistinit(model, requestedTrip);
		}else if(action.equalsIgnoreCase("dltsightcity")) {
				sightseeingRepository.delete(nameofsight);
				sightlistinit(model, requestedTrip);
			
		}
		
		
		return "tripeditor";
	}
	
	
	
	
	@RequestMapping(value="/addnewsight", method = RequestMethod.POST)
	public String addnewsight(@RequestParam String nameofsight, Model model,
			@ModelAttribute("requestedTrip") Trip requestedTrip,
			@ModelAttribute("sights") List<Sightseeing> sightslist1, @ModelAttribute("sights2") List<Sightseeing> sightslist2) {

		// model.addAttribute("requestedSight", nameofsight);
	   //	int ind = nameofsight.getIdsightseeings();
		boolean ans=false;
		if(sightslist1==null) ans=false; else  ans = sightslist1.stream().filter(o -> o.getSightseeingsname() == nameofsight).findFirst().isPresent();
		boolean ans2=false;
		if(sightslist2==null) ans=false; else ans2 = sightslist2.stream().filter(o -> o.getSightseeingsname() == nameofsight).findFirst().isPresent();
		TripSightseeing tripSightseeing=new TripSightseeing();
		Sightseeing newSightsee=null;
		if (ans2&&!ans) {
			
	//		Sightseeing sightseeing = null;
			newSightsee = sightslist2.stream()
		            .filter(x -> x.getSightseeingsname() == nameofsight)
		            .findFirst()
		            .get(); 
			if(newSightsee!=null) {
			tripSightseeing.setSightseeing(newSightsee);
			tripSightseeing.setTrip(requestedTrip);
			tripSightseeing=tripSightseeingRepository.save(tripSightseeing);
			
			}

		}else if(!ans2&&!ans) {
			newSightsee=new Sightseeing();
			newSightsee.setCity(requestedTrip.getCity());
			newSightsee.setSightseeingsname(nameofsight);
			newSightsee=sightseeingRepository.save(newSightsee);
			tripSightseeing.setSightseeing(newSightsee);
			tripSightseeing.setTrip(requestedTrip);
			tripSightseeing=tripSightseeingRepository.save(tripSightseeing);	
		}else if(ans) {
			
			newSightsee = sightslist1.stream()
		            .filter(x -> x.getSightseeingsname() == nameofsight)
		            .findFirst()
		            .get(); 
			tripSightseeing=tripSightseeingRepository.findOneByTripAndSightseeing(requestedTrip, newSightsee);
		}
		
		initSights(model, requestedTrip);

		// model.addAttribute("requestedSightgs", gson.toJson(nameofsight));

		model.addAttribute("requestedSight", newSightsee);
		model.addAttribute("requestedtrSight", tripSightseeing.getIdtripSightseeing());
		return "tripeditor";
	}
	

	@ModelAttribute("trips")
	public List<Trip> getusers() {
		return tripRepository.findAll();
	}

	public List<Sightseeing> getsights(int id) {
		return sightseeingRepository.findBytripSightseeingsTripIdtripIn(id);
	}

	public List<Sightseeing> getsights2(Trip id) {
		List<Sightseeing> l2 = sightseeingRepository.findBycityIn(id.getCity());
		return l2;
	}

	public int getsights3(Trip id) {
		return (cityRepository.findByTripsIn(id)).getIdcities();
	}

	public List<Sightseeing> getsightsdiff(List<Sightseeing> l1, List<Sightseeing> l2) {
		Set<Sightseeing> ad = new HashSet<Sightseeing>(l1);
		Set<Sightseeing> bd = new HashSet<Sightseeing>(l2);
		ad.removeAll(bd);
		List<Sightseeing> mainList = new ArrayList<Sightseeing>();
		mainList.addAll(ad);
		return mainList;
	}

	public void initSights(Model model, Trip trip) {

		List<Sightseeing> l1 = getsights(trip.getIdtrip());
		model.addAttribute("sights", l1);
		model.addAttribute("sights2", getsightsdiff(getsights2(trip), l1));
	}

	/*
	 * @PostMapping("/addpic") public @ResponseBody String
	 * getSearchUserProfiles(@RequestBody Tosave search, HttpServletRequest request)
	 * { System.out.println(search.getAddr()); return "tripeditor";
	 * 
	 * // your logic next }
	 */

	@RequestMapping(method = RequestMethod.POST, value = "/addpic")
	@ResponseBody
	public String performLogin(@RequestBody Tosave json, HttpServletRequest request, HttpServletResponse response) {
		System.out.println(json);
		Stateful.imgdetails.add(json);
		return "fileone";
	}
	
	
	@RequestMapping(method = RequestMethod.POST, value = "/addpictok")
	@ResponseBody
	public String tokenize1(@RequestBody Tosave json, HttpServletRequest request, HttpServletResponse response) {
		System.out.println(json);
		int totmp=json.getTrs();
		String work =json.getAddr();
	    StringTokenizer st = new StringTokenizer(work, ";");
        String towrk="";
        while(st.hasMoreTokens()){
        towrk=st.nextToken();Stateful.imgdetails.add(new Tosave(totmp,towrk));}
		return "fileone";
	}
	
	
	

	@RequestMapping("/check")     
	@ResponseBody
	public List<Tosave> check(@RequestParam Integer id, HttpServletRequest request, HttpServletResponse response, Model model) {
	//    model.addAttribute("tbldet", Stateful.imgdetails);
	    return  Stateful.imgdetails;
	}	
	
	
	@RequestMapping("/ispresent")     
	@ResponseBody
	public List<Tosave> checkispresent(@RequestParam Integer id, HttpServletRequest request, HttpServletResponse response, Model model) {
	//    model.addAttribute("tbldet", Stateful.imgdetails);
	//	IsPresentState isPresentState=new IsPresentState();
				
	    return isPresentState.init(Stateful.imgdetails);
	}	
	
	
	
	@RequestMapping("/check1")     
	@ResponseBody
	public List<Tosave> check1(@RequestParam(value = "id") String id, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Pic> listp=picRepository.findAllBytripSightseeingIdtripSightseeingIn(Integer.parseInt(id));

		System.out.println(id);
		Stateful2 stateful2=new Stateful2();
		stateful2.init(listp,Integer.parseInt(id));
		System.out.println(Stateful2.imgdetails+"ddd  ");
	   // model.addAttribute("tbldet", Stateful2.imgdetails);
	    return  Stateful2.imgdetails;
	}	
	
	@RequestMapping("/removepic")     
	@ResponseBody
	public void removepic(@RequestParam(value = "name") String id,@RequestParam(value = "attr") String id1, HttpServletRequest request, HttpServletResponse response, Model model) {
		
		System.out.println(id+" dffddfdfff12 "+id1);
		if(id.equals("a")) {
			
			Tosave tmp = Stateful2.imgdetails.get(Integer.parseInt(id1));
			TripSightseeing tripSightseeing= tripSightseeingRepository.findOneByidtripSightseeing(tmp.getTrs());
			Pic pic = picRepository.findOneBypicsAddrAndTripSightseeing(tmp.getAddr(), tripSightseeing);
			tripSightseeing.removePic(pic);
			tripSightseeingRepository.save(tripSightseeing);
		}
		else if(id.equals("b")) {
		Stateful.imgdetails.remove(Integer.parseInt(id1));
		}
		


	}	
	
	@RequestMapping("/clearpiclist")     
	@ResponseBody
	public String clrlstpic(@RequestParam Integer id, HttpServletRequest request, HttpServletResponse response, Model model) {
	//    model.addAttribute("tbldet", Stateful.imgdetails);
	 Stateful.clearItems();
	 System.out.println(Stateful.imgdetails+"fddfdffd");
	 return "fileone";
	}	
	
	
	
	@RequestMapping("/dbsbmt")     
	@ResponseBody
	public String dbsbmt( HttpServletRequest request, HttpServletResponse response, Model model) {
	//    model.addAttribute("tbldet", Stateful.imgdetails);
		List<Tosave> tmp=Stateful.imgdetails;
		   tmp.forEach(
		           p-> {
		             Pic a = new Pic();
		             a.setPicsAddr(p.getAddr());
		             Optional<TripSightseeing> b=tripSightseeingRepository.findById(p.getTrs());
		             if( b.isPresent()) {a.setTripSightseeing(b.get()); picRepository.save(a);
		            // b.get().addPic(a);
		             //tripSightseeingRepository.s
		             }
		            }
		    );
		   
		   System.out.println("sdsdsddssfdS");
		   Stateful.imgdetails.clear();
	/* Stateful.clearItems();
	 System.out.println(Stateful.imgdetails+"fddfdffd");*/
	 return "fileone";
	}	
	
	
	@ModelAttribute("cities")
	public List<City> getcities() {
		return cityRepository.findByOrderByIdcitiesDesc();
	}
	
	@ModelAttribute("City1")
	public City getcityobj() {
		return new City();
	}
	
	
	
	@PostMapping("/delcity")
	public String delcity(@ModelAttribute("City1") City city, Model model) {
		System.out.println(city/*.getIdcities()*/);
	/*	city=cityRepository.findById(city.getIdcities()).get();
		int a = sightseeingRepository.countByCity(city);
		System.out.println("count = "+a);
		if(a==0) {
		cityRepository.delete(city);
		getcities();}*/
		return "tripeditor";
	}
	
	
	@PostMapping("/deltrip")
	public String deltrip(@ModelAttribute("requestedTrip") Trip requestedTrip, Model model) {

		tripRepository.delete(requestedTrip);

		return "tripeditor";
	}
	
}