package com.my.travel.controller;

import java.awt.image.BufferedImage;
import java.net.URL;
import java.sql.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.my.travel.dao.CityRepository;
import com.my.travel.dao.PicRepository;
import com.my.travel.dao.StorePersisRepository;
import com.my.travel.dao.TravelerRepository;
import com.my.travel.dao.TripRepository;
import com.my.travel.dao.UserRepository;
import com.my.travel.model2.City;
import com.my.travel.model2.Pic;
import com.my.travel.model2.StorePersis;
import com.my.travel.model2.Traveler;
import com.my.travel.model2.Trip;
import com.my.travel.model2.User;

// This means that this class is a Controller
@Controller // This means URL's start with /demo (after Application path)
@SessionAttributes({ "users", "iliaUser", "requestedUser" })
@RequestMapping(value = "/web")
public class MainController {
	// This means to get the bean called userRepository
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private TravelerRepository travelerRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private TripRepository tripRepository;
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private PicRepository picRepository;

	@Autowired
	private CityRepository cityRepository;

	@Autowired
	private StorePersisRepository storePersisRepository;

	@RequestMapping(value = "/main")
	public String notesList(Model model) {
		System.out.println("dvdfd");
		if (!(model.containsAttribute("requestedUser")))
			return "redirect:/web/process-init";
		else
			return "fileone";
	}

	@PostMapping("/selectuser")
	public String select(@RequestParam Traveler nameoftraveler, Model model) {

		model.addAttribute("requestedUser", nameoftraveler);
		return "fileone";
	}

	@RequestMapping("/removeuser")
	public String removeuser(@ModelAttribute("requestedUser") Traveler requestedUser,
			@ModelAttribute("iliaUser") Traveler iliaUser, Model model) {
		if (requestedUser.getIdtraveler() != iliaUser.getIdtraveler())
			;
		travelerRepository.delete(requestedUser);
		model.addAttribute("requestedUser", iliaUser);
		return "fileone";
	}

	public List<Traveler> listAll() {
		List<Traveler> counts = new ArrayList<>();
		travelerRepository.findAll().forEach(counts::add);
		return counts;
	}

	@RequestMapping("/secret")
	public String addsecretuser() {
		User u = new User();
		u.setPassword("$2a$04$KNLUwOWHVQZVpXyMBNc7JOzbLiBjb9Tk9bP7KNcPI12ICuvzXQQKG");
		u.setRole("ADMIN");
		u.setUsername("myuser");

		userRepository
				.save(new User("myuser", "$2a$04$KNLUwOWHVQZVpXyMBNc7JOzbLiBjb9Tk9bP7KNcPI12ICuvzXQQKG", "ADMIN"));
		userRepository
				.save(new User("myuser2", "$2a$04$1.YhMIgNX/8TkCKGFUONWO1waedKhQ5KrnB30fl0Q01QKqmzLf.Zi", "USER"));

		return "login";
	}

	@RequestMapping(value = "/process-init")
	public ModelAndView processPerson(/* @ModelAttribute Person person */) {
		empty = false;
		System.out.println("asasdsad21212");

		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("fileone");

		modelAndView.addObject("requestedUser", getiliaUser());
		modelAndView.addObject("selectedOption", new Traveler());
		/// modelAndView.addObject("frontp", get3pics());
		return modelAndView;

	}

	@RequestMapping(value = "/savenewtrip", method = RequestMethod.POST)
	public String savenewtrip(@ModelAttribute("newtrip") Trip tr, Model model, HttpSession session) {
		System.out.println(tr);
		tr.setTraveler((Traveler) session.getAttribute("requestedUser"));
		tripRepository.save(tr);
		return "fileone";

	}

	@RequestMapping(value = "/adduser", method = RequestMethod.POST)
	public String developersAdd(@RequestParam String name, @RequestParam Date birthdate, Model model) {
		Traveler newDeveloper = new Traveler();
		newDeveloper.setTravelerBirthdate(birthdate);
		newDeveloper.setTravelerName(name);

		travelerRepository.save(newDeveloper);
		List<Traveler> users = new ArrayList<>();
		users = listAll();
		model.addAttribute("users", users);
		System.out.println("asasdsad");

		return "fileone";
	}

	@RequestMapping(value = "/initsp")
	public String initstorepersis(Model model) {
		storePersisRepository.deleteAll();
		return "redirect:/web/process-init";
	}

	@RequestMapping(value = "/addcity", method = RequestMethod.POST)
	public String addcity(@RequestParam String newcity, Model model) {
		City city = new City();
		city.setCityName(newcity);
		cityRepository.save(city);
		/*
		 * List<Traveler> users = new ArrayList<>(); users = listAll();
		 * model.addAttribute("users", users); System.out.println("asasdsad");
		 */
		model.addAttribute("cities", getcities());
		return "fileone";
	}

	@ModelAttribute("iliaUser")
	public Traveler getiliaUser() {
		List<Traveler> tmp = travelerRepository.findBytravelerNameContainingIgnoreCase("Ilia M");
		if (tmp.size() == 0) {
			Traveler ilia = new Traveler();
			ilia.setTravelerBirthdate(java.util.Date // Terrible old legacy class, avoid using. Represents a moment in
														// UTC.
					.from( // New conversion method added to old classes for converting between legacy
							// classes and modern classes.
							LocalDate // Represents a date-only value, without time-of-day and without time zone.
									.of(1986, 1, 8) // Specify year-month-day. Notice sane counting, unlike legacy
													// classes: 2014 means year 2014, 1-12 for Jan-Dec.
									.atStartOfDay( // Let java.time determine first moment of the day. May *not* start
													// at 00:00:00 because of anomalies such as Daylight Saving Time
													// (DST).
											ZoneId.of("Asia/Jerusalem") // Specify time zone as `Continent/Region`,
																		// never the 3-4 letter pseudo-zones like `PST`,
																		// `EST`, or `IST`.
									) // Returns a `ZonedDateTime`.
									.toInstant() // Adjust from zone to UTC. Returns a `Instant` object, always in UTC
													// by definition.
					));
			ilia.setTravelerName("Ilia Mashevitzky");

			travelerRepository.save(ilia);
		}
		return travelerRepository.findBytravelerNameContainingIgnoreCase("Ilia M").get(0);
	}

	/*
	 * @ModelAttribute("requestedUser") public List<Traveler> getusers() { return
	 * travelerRepository.findAll(); }
	 */

	@ModelAttribute("frontp")
	public List<Object> get3pics() {
		List<Object> ans = new ArrayList<Object>();
		List<StorePersis> touse = storePersisRepository.findBycatname("frontp");
		if (touse.size() > 2) {
			for (int i = 0; i < 3; i++) {
				StorePersis sp = touse.get(i);
				ans.add(new Object[] { picRepository.getOne(sp.getData1ind()),
						cityRepository.getOne(sp.getData2ind()) });
			}

		} else {

			// List<StorePersis> tmpppt1 = storePersisRepository.findBycatname("ratio");

			ans = somemethod();// for init
//			int bubble1 = -1;
//			int ind1 = -1;
//			for (int p = 0; p < tmpppt1.size(); p++) {
//				StorePersis storePersis = tmpppt1.get(p);
//				if (storePersis.getData2ind() > bubble1)
//					bubble1 = storePersis.getData2ind();
//				ind1 = storePersis.getData1ind();
//
//			}
//			System.out.println(ind1 + " fdfd " + bubble1);
//			if (bubble1 != -1)
//				ans = chkpics(ind1);
			if (null == ans)
				return nullfrontp();// null;
			if (ans.size() < 3)
				ans = somemethod();else return ans;
			if (null == ans)
				return nullfrontp();// null;
			if (empty)
				return nullfrontp();// null;
			if (ans == null || ans.size() < 3)
				return nullfrontp();// null;
			List<StorePersis> touse1 = storePersisRepository.findBycatname("frontp");
			if (touse1.isEmpty()) {	storepersis(ans);}

		}

		return ans;
	}

	private void storepersis(List<Object> ans) {
		for (int i = 0; i < 3; i++) {
			Object a = ans.get(i);
			Pic p = (Pic) ((Object[]) a)[0];
			City c = (City) ((Object[]) a)[1];

			System.out.println(p);
			StorePersis sp = new StorePersis("frontp", p.getIdpics(), c.getIdcities());
			storePersisRepository.save(sp);
			// ans.add(new Object[] { picRepository.getOne(sp.getData1ind()),
			// cityRepository.getOne(sp.getData2ind()) });
		}
	}

	private List<Object> somemethod() {
		List<Object> ans;
		int ind=getratio();
		ans=chkpics(ind);
		if(ans!=null&&ans.size()>0)
		storepersis(ans);

		return ans;
	}

	private int getratio() {

		List<StorePersis> tmpppt = storePersisRepository.findBycatname("ratio");
		int bubble = -1;
		int ind = -1;
		for (int p = 0; p < tmpppt.size(); p++) {
			if (tmpppt.get(p).getData2ind() > bubble) {
				bubble = tmpppt.get(p).getData2ind();
				ind = tmpppt.get(p).getData1ind();

			}
			System.out.println(ind + " fdfd " + bubble);

		}if(bubble==-1) return -1;
		return ind;

	}

	@ModelAttribute("users")
	public List<Traveler> getusers() {
		return travelerRepository.findAll().stream().filter(t->t.getTravelerBirthdate()!=null).collect(Collectors.toList());
	}

	@ModelAttribute("newtrip")
	public Trip newtrip() {
		return new Trip();
	}

	@ModelAttribute("cities")
	public List<City> getcities() {
		return cityRepository.findAll();
	}

	@ModelAttribute("frontcities")
	public List<City> getfrontcities() {
		List<City> ans = comcity();
		if (ans.size() < 3)
			return null;
		return ans;
	}

	@ModelAttribute("utrips")
	public List<Trip> getutrips() {
		List<Trip> ans = utrips();
		if (ans.size() < 3)
			return null;
		return ans;
	}

	@ModelAttribute("frtr")
	public List<List<Trip>> getfrtr() {
		if (empty)
			return null;

		return frontTrips();
	}

	/*
	 * @ModelAttribute("sampleTrip") public Trip getsmtr() { return
	 * tripRepository.getOne(1); }
	 */
	/*
	 * @InitBinder public void initDateBinder(final WebDataBinder binder) {
	 * binder.registerCustomEditor(Date.class, new CustomDateEditor(new
	 * SimpleDateFormat("yyyy-mm-dd"), true)); }
	 */

	final double neededratio = 1.777777777;
	boolean empty = false;

	public List<Object> chkpics(int uuu) {

	//	List<StorePersis> tmpppt = storePersisRepository.findBycatname("ratio");
//		int bubble = -1;
//		int ind = -1;
//		for (int p = 0; p < tmpppt.size(); p++) {
//			StorePersis storePersis = tmpppt.get(p);
//			storePersis.setData2ind(0);
//			storePersisRepository.save(storePersis);
//
//		}

		List<Object> ans = new ArrayList<Object>();
		List<Object[]> tmp = picRepository.findFrontPics(PageRequest.of(0, 6));
		int sizee = tmp.size();
		if (sizee < 3) {
			System.out.println(sizee + " sdds");
			empty = true;
			return null;
		}
		City curc = (City) tmp.get(0)[1];
		Pic q = (Pic) tmp.get(0)[0];
		// int ind = 0;
		List<Pic> tmplst = null;
		int b = uuu == -1 ? 177 : uuu;

		int countans = 0;
		String str = null;
		for (int k = 0; k < sizee; k++) {
			// boolean catched = false;boolean checked=false;
			curc = (City) tmp.get(k)[1];
			q = (Pic) tmp.get(k)[0];
			System.out.println(k + "   iind");
			str = (q).getPicsAddr();
			System.out.println(str);
//		if (str.length() >= 9 && str.substring(str.length() - 3).equalsIgnoreCase("jpg")) {
//			try {
//				URL url1 = new URL(str);
//
//				// TODO Auto-generated catch block
//
//				BufferedImage image1 = ImageIO.read(url1.openStream());
//				boolean tmpd = false;
//
//				double ratio = 1.0 * image1.getWidth() / image1.getHeight();
//				int a = (int) (ratio * 100);
//				System.out.println("f");
//				double diff = Math.abs(a - b);
//
//				System.out.println(a + " sf sf f s    " + b + " ");
//				if (diff <= 3) {
//					System.out.println(a + " " + b + " ");
//					System.out.println("trueeeeeeeeee");
//					countans++;
//					tmpd = true;// Numbers are close enough
//
//				}
//				if (str.length() >= 9 && str.substring(str.length() - 3).equalsIgnoreCase("jpg") && tmpd) {
//
//					ans.add(new Object[] { q, curc });
//
//					System.out.println("3");
//					tmplst = null;
//
//				} else {
//					catched = true;checked=true;
//				}
//
//			} catch (Exception e) {
//				System.out.println("e");
//
//		}
//
//		} else {
//			catched = true;
//		}
//		if (catched) {
			tmplst = picRepository.findTop5ByTripSightseeingTripCityIdcities(curc.getIdcities());
			int localsize = tmplst.size();
			for (int i = 0; i < localsize; i++) {
				q = tmplst.get(i);
				String str1 = q.getPicsAddr();

				URL url2;

				System.out.println(str1 + "   iadri");
				System.out.println(i + "   ii");
				if (str1.length() >= 9 && str1.substring(str1.length() - 3).equalsIgnoreCase("jpg")) {
					try {
						url2 = new URL(q.getPicsAddr());

						// TODO Auto-generated catch block

						BufferedImage image2 = ImageIO.read(url2.openStream());

						boolean tmpd = false;

						double ratio = 1.0 * image2.getWidth() / image2.getHeight();
						int a = (int) (ratio * 100);

						StorePersis persis = storePersisRepository.findByCatnameAndData1ind("ratio", a);
						if (persis == null) {
							persis = new StorePersis("ratio", a, 1);
							storePersisRepository.save(persis);
						} else {
							int ww = persis.getData2ind();
							persis.setData2ind(++ww);
							storePersisRepository.save(persis);
						}
						System.out.println("f1");
						double diff = Math.abs(a - b);

						System.out.println(a + " sf sf f s    d " + b + " ");
						if (diff <= 3) {
							System.out.println(a + " " + b + " ");
							System.out.println("trueeeeeeeeee");
							countans++;
							tmpd = true;// Numbers are close enough

							if (str1.length() >= 9 && str1.substring(str1.length() - 3).equalsIgnoreCase("jpg")
									&& tmpd) {
								ans.add(new Object[] { q, curc });
								i = 6;
								if (countans >= 3)
									return ans;
							}

						}

					} catch (Exception e) {
						// i++;
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			}

//		}
//		ind++;
		}
		// City curc=(City) tmp.get(ind)[1];

		// Object[] a1 = tmp.get(ind);

		return ans;
	}

//	public List<Object> chkpics() {
//		List<Object> ans = new ArrayList<Object>();
//		List<Object[]> tmp = picRepository.findFrontPics(PageRequest.of(0, 6));int sizee=tmp.size();
//		if (sizee<3) { System.out.println(sizee+" sdds"); empty=true; return null;}
//		City curc = (City) tmp.get(0)[1];
//		Pic q = (Pic) tmp.get(0)[0];
//		int ind = 0;
//		List<Pic> tmplst = null;
//		int b = 177;
//	
//
//		int countans = 0;
//		String str = null;
//		while (ind < sizee && countans < 3) {
//			boolean catched = false;boolean checked=false;
//			curc = (City) tmp.get(ind)[1];
//			q = (Pic) tmp.get(ind)[0];
//			System.out.println(ind + "   iind");
//			str = (q).getPicsAddr();
//			System.out.println(str);
//			if (str.length() >= 9 && str.substring(str.length() - 3).equalsIgnoreCase("jpg")) {
//				try {
//					URL url1 = new URL(str);
//
//					// TODO Auto-generated catch block
//
//					BufferedImage image1 = ImageIO.read(url1.openStream());
//					boolean tmpd = false;
//
//					double ratio = 1.0 * image1.getWidth() / image1.getHeight();
//					int a = (int) (ratio * 100);
//					System.out.println("f");
//					double diff = Math.abs(a - b);
//
//					System.out.println(a + " sf sf f s    " + b + " ");
//					if (diff <= 3) {
//						System.out.println(a + " " + b + " ");
//						System.out.println("trueeeeeeeeee");
//						countans++;
//						tmpd = true;// Numbers are close enough
//
//					}
//					if (str.length() >= 9 && str.substring(str.length() - 3).equalsIgnoreCase("jpg") && tmpd) {
//
//						ans.add(new Object[] { q, curc });
//	
//						System.out.println("3");
//						tmplst = null;
//
//					} else {
//						catched = true;checked=true;
//					}
//
//				} catch (Exception e) {
//					System.out.println("e");
//
//			}
//
//			} else {
//				catched = true;
//			}
//			if (catched) {
//				tmplst = picRepository.findTop5ByTripSightseeingTripCityIdcities(curc.getIdcities());
//				int localsize=tmplst.size();
//				for (int i = 0; i < localsize; i++) {
//					q = tmplst.get(i);
//					String str1 = q.getPicsAddr();
//
//					URL url2;
//
//					System.out.println(str1 + "   iadri");
//					System.out.println(i + "   ii");
//					if (str1.length() >= 9 && str1.substring(str1.length() - 3).equalsIgnoreCase("jpg")) {
//						try {
//							url2 = new URL(q.getPicsAddr());
//
//							// TODO Auto-generated catch block
//
//							BufferedImage image2 = ImageIO.read(url2.openStream());
//
//							boolean tmpd = false;
//
//							double ratio = 1.0 * image2.getWidth() / image2.getHeight();
//							int a = (int) (ratio * 100);
//							System.out.println("f1");
//							double diff = Math.abs(a - b);
//
//							System.out.println(a + " sf sf f s    d " + b + " ");
//							if (diff <= 3) {
//								System.out.println(a + " " + b + " ");
//								System.out.println("trueeeeeeeeee");
//								countans++;
//								tmpd = true;// Numbers are close enough
//
//							}
//							if (str1.length() >= 9 && str1.substring(str1.length() - 3).equalsIgnoreCase("jpg")
//									&& tmpd) {
//								ans.add(new Object[] { q, curc });
//								i = 6;
//
//							}
//
//						} catch (Exception e) {
//							i++;
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
//
//					}
//				}
//
//			}
//			ind++;
//		}
//		// City curc=(City) tmp.get(ind)[1];
//
//		// Object[] a1 = tmp.get(ind);
//
//		return ans;
//	}

	public List<Trip> utrips() {
		return tripRepository.uniqueTrips(PageRequest.of(0, 3));
	}

	public List<City> comcity() {
		return cityRepository.commoncities(PageRequest.of(0, 3));
	}

	public List<List<Trip>> frontTrips() {
		List<List<Trip>> ans = new ArrayList<List<Trip>>();
		List<City> a = comcity();
		if (a.size() < 3)
			return null;
		ans.add(tripRepository.findByCityIn(a.get(0)));
		ans.add(tripRepository.findByCityIn(a.get(1)));
		ans.add(tripRepository.findByCityIn(a.get(2)));

		return ans;
	}

	public List<Object> nullfrontp() {
		List<Object> ans = new ArrayList<Object>();
		Pic q = new Pic();
		q.setPicsAddr("@{/img/7.png}");
		// String q=;
		City city = new City();
		city.setCityName("Please add more cities with data");
		city.setIdcities(-1);
		for (int i = 0; i < 3; i++) {

			ans.add(new Object[] { q, city });
		}

		return ans;

	}
}